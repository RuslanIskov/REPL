# -*- coding: UTF-8 -*-

import os
import inspect

PLUGINS_DIR = 'plugins'
IGNORED_PLUGIN_FILENAMES = ['__init__']
IGNORED_CLASSES = 'clsBasePlugin'

class clsBasePlugin(object):
	def __init__( self, name = '' ):
		self._name = name or self.__class__.__name__
		self._methods_dict = {}
		self._methods_list = []
		self._methods_names_list = []
		for attr in dir(self):
			obj = getattr(self, attr)
			if inspect.ismethod(obj) and attr[0] != '_':
				self._methods_dict[attr] = obj
				self._methods_list.append(obj)
		self._methods_names_list = list(self._methods_dict.keys())

	def __len__( self ):
		return len( self._methods_list )

	def __getitem__( self, key ):
		if isinstance( key, int ):
			return self._methods_list[ key ]
		elif key in self._methods_names_list:
			return self._methods_dict[ key ]
		else:
			raise IndexError('method "' + key + '" not found')

	def __contains__( self, item ):
		return item in self._method_names_list

	def __iter__( self ):
		return iter(self._methods_list)
		
	@property
	def name(self):
		return self._name
		
	@property
	def methods(self):
		return tuple(self._methods_names_list)
		
	def run(self, *args):
		'''головний метод, перевизначати у нащадках
		'''
		pass

		
class RPlugins(object):
	def __init__( self, plugins_dir = PLUGINS_DIR ):
		self._plugins_names = []
		for fileName in os.listdir( plugins_dir ):
			fName, fExt = os.path.splitext( fileName )
			if fExt == '.py':
				if fName not in IGNORED_PLUGIN_FILENAMES:
					package = __import__(PLUGINS_DIR + '.' + fName)
					self._plugins_names.append( fName )
		self._plugins_list = []
		self._plugins_dict = {}
		for plgName in self._plugins_names:
			module = getattr( package, plgName )
			for attr in dir( module ):
				obj = getattr( module, attr )
				if inspect.isclass( obj ):
					if issubclass( obj, clsBasePlugin ):
						cls = obj( plgName )
						if cls.__class__.__name__ not in IGNORED_CLASSES:
							self._plugins_list.append( cls )
							self._plugins_dict[ plgName ] = cls
		# self._plugins_names = list( self._plugins_dict.keys() )

	def __len__( self ):
		return len( self._plugins_list )

	def __getitem__( self, key ):
		if isinstance( key, int ):
			return self._plugins_list[ key ]
		elif key in self._plugins_dict:
			return self._plugins_dict[ key ]
		else:
			raise IndexError('plugin "' + key + '" not found')

	def __contains__( self, item ):
		return item in self._plugins_names

	def __iter__( self ):
		return self._plugins_list.__iter__()

	@property
	def names( self ):
		return tuple( self._plugins_names )
